/*Иерархическое дерево
HTML-документ представляет собой иерархическое дерево. Это означает, что у каждого элемента (кроме корневого) есть только один родитель, т.е. элемент, внутри которого он располагается. У корневого раздела родитель отсутствует.

<html>
   <head></head>
   <body>
      <p>Текст документа</p>
      <p class="text">Выделенная <span>строка</span></p>
   </body>
</html>
Для этой страницы можно нарисовать такое иерархическое дерево:
Иерархическая структура документа определяет основы концепции наследования.



Наследование
Наследование в CSS — механизм, с помощью которого значения свойств элемента-родителя передаются его элементам-потомкам.
Стили, присвоенные некоторому элементу, наследуются всеми потомками (вложенными элементами), если они не переопределены явно. Например, размер шрифта и его цвет достаточно применить к body, чтобы все элементы внутри имели те же свойства.
Наследование позволяет сократить размер таблицы стилей, но если стилей много, то отследить какой родительский элемент установил некоторое свойство, становится сложнее.


<p class="text">Cтрока c выделенным <span>словом</span></p>
Представим, что нам нужно установить красный цвет текста для всего текста. Зададим CSS-свойства следующим образом:*/
.text {  color: red;  }
/*Благодаря наследованию цвет текста в теге span автоматически станет красным:




Наследуемые свойства
К наследуемым свойствам относятся в первую очередь свойства, определяющие параметры отображения текста:
font-size, font-family, font-style, font-weight, color, text-align, text-transform, text-indent, line-height, letter-spacing, word-spacing, white-space, direction и т. д.
Также к наследуемым свойствам относятся list-style, cursor, visibility, border-collapse и некоторые другие. Но они используются значительно реже.
Весь список наследуемых свойств смотрите в стандарте CSS. Значение yes в колонке Inherited?.
Эти свойства можно и нужно задавать через предков, следуя семантике документа.



Принудительное наследование
Для каждого свойства может быть задано значение inherit.
Оно означает, что данное свойство принимает такое же значение, как и у родительского элемента. Значение inherit может быть использовано для усиления наследуемых значений, а также в свойствах, которые обычно не наследуются.
В данном случае у тегов p свойство background будет таким же, как и у их родительских тегов.*/
p { background: inherit; }




/*Каскадирование
CSS расшифровывается как «Cascading Style Sheets» или «каскадные таблицы стилей».
Каскадность обозначает, что к одному и тому же элементу может применяться несколько CSS-правил (наборов CSS-свойств). Среди этих свойств могут быть и конфликтующие между собой. Поэтому существуют инструкции, которые определяют, каким будет финальный набор свойств элемента.
<p class="text" style="color: red;"></p>

CSS-правила существуют как минимум в трёх разных местах:
1 в подключаемом файле style.css для селекторов p или .text;
2 в атрибуте style;
3 в стандартных стилях отображения, встроенных в браузер.

Имеется три основные концепции, управляющие порядком, в котором применяются CSS-свойства:
1 важность;
2 специфичность;
3 порядок исходного кода.

Селекторы у правил одинакового типа, и соответственно обладают одинаковой специфичностью. В таком случае более высоким приоритетом обладает то правило, которое расположено в CSS-коде ниже. 

Простое объяснение специфичности звучит так:
Чем меньшее количество элементов потенциально может выбрать селектор, тем он специфичнее.

!important
Существует способ переопределить из подключаемых CSS-файлов даже стили, заданные в атрибуте style. Для этого нужно использовать ключевое слово !important. Оно задаёт CSS-свойству усиленный приоритет. Цвет текста в этом примере будет синим.
<p style="color: red;" class="blue">Синий или красный?</p> */
.blue { color: blue !important; }
/*При вёрстке не рекомендуется часто использовать !important. По возможности старайтесь обходиться без него.*/



/*Расчёт значения специфичности
Специфичность селектора разбивается на 4 группы — a, b, c, d:
- если стиль встроенный, т.е. определен как style="...", то а=1, иначе a=0;
- значение b равно количеству идентификаторов (тех, которые начинаются с #) в селекторе;
- значение c равно количеству классов, псевдоклассов и селекторов атрибутов;
- значение d равно количеству селекторов типов элементов и псевдо-элементов.

После этого полученное значение приводится к числу (обычно в десятичной системе счисления). Селектор, обладающий большим значением специфичности, обладает и большим приоритетом.

Селектор              a, b, c, d      Число
span                  0, 0, 0, 1      1
div .cat-in-box       0, 0, 1, 1      11
#floor .cat-in-box    0, 1, 1, 0      110
div span              0, 0, 0, 2      2
.cat-in-box           0, 0, 1, 0      10
#floor span           0, 1, 0, 1      101
Отсюда сразу видно, что в нашем примере самым приоритетным является селектор #floor .cat-in-box.
*/